@echo off
echo ============================================
echo  CONFIGURACI√ìN DE IP DE SERVICIO ESPEC√çFICA
echo  PARA WEATHERAPP BACKEND
echo ============================================
echo.

REM ===== CONFIGURACI√ìN DE IP DE SERVICIO =====
REM ‚ö†Ô∏è IMPORTANTE: Reemplaza este valor con tu IP de servicio real:
REM 
REM Ejemplos:
REM - IP de interfaz de red espec√≠fica: 192.168.1.100
REM - IP de interfaz de servicio: 10.0.0.50
REM - IP de interfaz dedicada: 172.16.1.200

set SERVICE_IP=192.168.1.100

echo ‚úÖ Configuraci√≥n de IP de servicio:
echo    SERVICE_IP=%SERVICE_IP%
echo.
echo ‚ÑπÔ∏è  Todas las conexiones salientes (HTTP/HTTPS) usar√°n esta IP
echo.

REM ===== VERIFICAR CONFIGURACI√ìN ACTUAL =====
echo üîç Verificando configuraci√≥n actual...
echo.

REM Mostrar interfaces de red disponibles
echo üì° Interfaces de red disponibles:
ipconfig | findstr /R /C:"Ethernet adapter" /C:"Wireless LAN adapter" /C:"IPv4 Address"
echo.

REM ===== VERIFICAR PM2 =====
echo üîç Verificando estado de PM2...
pm2 status
echo.

REM ===== ACTUALIZAR CONFIGURACI√ìN =====
echo üîÑ Actualizando configuraci√≥n de WeatherApp backend...
echo.

REM Parar servicio actual
echo ‚èπÔ∏è  Parando servicio actual...
pm2 stop weather-backend

REM Actualizar la variable de entorno en el archivo de configuraci√≥n
echo üìù Actualizando ecosystem.config.cjs con SERVICE_IP=%SERVICE_IP%
echo.
echo NOTA: Debes editar manualmente el archivo ecosystem.config.cjs
echo       y cambiar SERVICE_IP: '%SERVICE_IP%' en las secciones env y env_development
echo.

REM Iniciar con nueva configuraci√≥n
echo üöÄ Iniciando servicio con IP de servicio configurada...
pm2 start ecosystem.config.cjs --env production

REM Verificar estado
echo.
echo üìä Estado final del servicio:
pm2 status
echo.

REM Mostrar logs recientes
echo üìù √öltimos logs del servicio:
pm2 logs weather-backend --lines 10
echo.

REM ===== TESTS DE CONECTIVIDAD =====
echo üß™ Ejecutando tests de conectividad...
echo.

REM Test de health check
echo üè• Test de health check:
curl -s http://localhost:3001/api/health | findstr /C:"serviceIP" /C:"status"
echo.

REM Test directo de API
echo üå°Ô∏è  Test directo de API:
curl -s http://localhost:3001/api/test-direct/39001 | findstr /C:"success" /C:"serviceIP"
echo.

echo ‚úÖ CONFIGURACI√ìN COMPLETADA
echo.
echo üìã RESUMEN:
echo    ‚Ä¢ IP de Servicio: %SERVICE_IP%
echo    ‚Ä¢ Servicio:       weather-backend
echo    ‚Ä¢ Estado:         Ejecut√°ndose con IP espec√≠fica
echo    ‚Ä¢ Protocolo:      HTTPS con agentes personalizados
echo.
echo üîß PASOS ADICIONALES REQUERIDOS:
echo    1. Editar D:\nginx\weather-app\ecosystem.config.cjs
echo    2. Buscar SERVICE_IP: '192.168.1.100'
echo    3. Cambiar por tu IP real: SERVICE_IP: '%SERVICE_IP%'
echo    4. Ejecutar: pm2 restart weather-backend
echo.
echo üß™ PARA VERIFICAR LA CONFIGURACI√ìN:
echo    ‚Ä¢ Health check:     curl http://localhost:3001/api/health
echo    ‚Ä¢ Test API:         curl http://localhost:3001/api/test-direct/39001
echo    ‚Ä¢ Connectivity:     curl http://localhost:3001/api/connectivity-test
echo    ‚Ä¢ Debug info:       curl http://localhost:3001/api/debug
echo.
echo üîç PARA VER LOGS EN TIEMPO REAL:
echo    pm2 logs weather-backend --lines 50
echo.

pause